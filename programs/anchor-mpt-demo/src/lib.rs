use {anchor_lang::prelude::*, primitive_types_solana::H256, rlp::Rlp};

mod errors;
mod nibbles;
mod node;
mod trie;

use trie::*;

declare_id!("9n2uAscxSNrotCE2PC1DpKgtUFu7iSWEiJpbN9ynqzHp");

pub const PROOF_SEED: &[u8] = b"MptProof";

#[program]
pub mod anchor_mpt_demo {
    use super::*;

    pub fn init_proof(ctx: Context<InitProof>, params: InitProofParams) -> Result<()> {
        ctx.accounts.mpt_proof.data = Vec::new();
        ctx.accounts.mpt_proof.bump = ctx.bumps.mpt_proof;
        ctx.accounts.mpt_proof.hash_root = params.hash_root;

        Ok(())
    }

    pub fn append_proof(
        ctx: Context<AppendProof>,
        data: Vec<Vec<u8>>,
        is_merge: bool,
    ) -> Result<()> {
        for (k, v) in data.into_iter().enumerate() {
            if k == 0 && is_merge {
                let len = ctx.accounts.mpt_proof.data.len();
                ctx.accounts.mpt_proof.data[len - 1].extend_from_slice(&v);
            } else {
                ctx.accounts.mpt_proof.data.push(v);
            }
        }
        Ok(())
    }

    pub fn view_proof(ctx: Context<ValidateMpt>) -> Result<()> {
        let proof = vec![
            vec![
                249, 1, 49, 160, 91, 92, 142, 72, 9, 191, 46, 4, 51, 163, 82, 11, 58, 147, 19, 47,
                45, 22, 17, 175, 224, 86, 70, 238, 140, 20, 25, 164, 42, 175, 189, 69, 160, 100,
                161, 64, 235, 113, 8, 187, 48, 180, 0, 66, 69, 162, 165, 150, 197, 69, 118, 96,
                199, 46, 18, 219, 210, 51, 171, 221, 27, 67, 154, 132, 37, 160, 245, 4, 83, 96,
                164, 220, 148, 47, 55, 205, 117, 201, 30, 2, 201, 141, 205, 50, 103, 96, 22, 215,
                17, 169, 19, 199, 44, 187, 59, 251, 113, 60, 160, 174, 216, 83, 73, 189, 150, 149,
                99, 75, 182, 96, 93, 229, 144, 86, 249, 178, 6, 185, 124, 117, 137, 200, 83, 151,
                245, 136, 179, 14, 245, 23, 51, 160, 100, 52, 86, 65, 18, 210, 54, 87, 109, 180,
                145, 164, 197, 217, 248, 40, 154, 121, 243, 29, 20, 106, 99, 61, 160, 67, 127, 232,
                5, 239, 29, 187, 160, 20, 178, 236, 107, 181, 154, 142, 8, 225, 85, 207, 121, 9,
                87, 252, 61, 32, 66, 206, 72, 32, 11, 184, 167, 223, 123, 67, 153, 204, 48, 127,
                122, 160, 31, 126, 210, 152, 240, 75, 133, 55, 247, 167, 116, 205, 83, 250, 6, 247,
                222, 73, 161, 149, 253, 87, 228, 194, 248, 161, 122, 178, 9, 230, 25, 67, 160, 170,
                20, 44, 38, 131, 166, 160, 238, 195, 73, 197, 3, 218, 29, 99, 176, 250, 132, 248,
                87, 236, 170, 121, 188, 217, 143, 30, 51, 3, 18, 111, 124, 160, 15, 189, 253, 230,
                213, 255, 125, 61, 83, 251, 104, 181, 212, 156, 119, 154, 209, 119, 22, 181, 9,
                178, 16, 130, 206, 185, 195, 252, 128, 68, 76, 24, 128, 128, 128, 128, 128, 128,
                128, 128,
            ],
            vec![
                248, 113, 160, 27, 82, 200, 62, 45, 98, 213, 58, 221, 52, 238, 96, 70, 30, 34, 206,
                98, 37, 244, 44, 39, 77, 167, 117, 49, 101, 255, 66, 203, 179, 152, 169, 160, 250,
                204, 69, 214, 10, 248, 173, 101, 145, 93, 154, 19, 230, 129, 2, 115, 158, 16, 216,
                143, 192, 111, 127, 218, 148, 60, 254, 92, 216, 39, 255, 167, 160, 13, 79, 47, 250,
                33, 89, 17, 91, 98, 76, 141, 77, 187, 116, 142, 101, 127, 60, 180, 197, 250, 43,
                192, 40, 149, 194, 232, 242, 34, 149, 206, 54, 128, 128, 128, 128, 128, 128, 128,
                128, 128, 128, 128, 128, 128, 128,
            ],
            vec![
                228, 130, 0, 1, 160, 150, 167, 233, 16, 220, 246, 57, 188, 44, 229, 197, 128, 17,
                253, 164, 243, 190, 104, 147, 189, 1, 19, 208, 41, 164, 138, 2, 154, 77, 33, 5,
                128,
            ],
            vec![
                248, 145, 160, 107, 198, 74, 252, 94, 86, 153, 174, 159, 29, 94, 36, 65, 191, 128,
                183, 96, 122, 1, 5, 121, 61, 135, 232, 234, 160, 185, 162, 150, 178, 36, 43, 160,
                141, 189, 183, 206, 245, 67, 30, 79, 103, 33, 219, 33, 192, 33, 161, 195, 89, 184,
                67, 13, 98, 203, 31, 100, 29, 145, 189, 179, 139, 218, 166, 38, 160, 108, 198, 219,
                12, 80, 14, 80, 51, 16, 98, 175, 105, 135, 234, 176, 85, 105, 182, 242, 66, 70, 73,
                207, 215, 87, 220, 159, 107, 4, 98, 216, 73, 160, 144, 22, 44, 53, 244, 20, 19, 7,
                140, 204, 209, 241, 62, 19, 217, 134, 178, 232, 100, 153, 80, 3, 127, 255, 156,
                173, 213, 232, 89, 209, 177, 113, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
                128, 128, 128,
            ],
            vec![
                249, 2, 17, 160, 118, 137, 193, 76, 67, 84, 109, 110, 204, 192, 123, 34, 179, 250,
                217, 154, 102, 57, 238, 102, 192, 219, 77, 57, 145, 4, 205, 228, 112, 142, 214,
                250, 160, 187, 225, 48, 21, 201, 159, 12, 10, 163, 23, 112, 11, 181, 75, 142, 89,
                67, 214, 194, 60, 81, 235, 119, 103, 87, 47, 46, 79, 234, 207, 213, 165, 160, 125,
                166, 209, 166, 110, 233, 36, 92, 58, 216, 188, 181, 242, 47, 83, 125, 95, 4, 173,
                120, 135, 63, 106, 22, 162, 194, 53, 48, 44, 146, 30, 203, 160, 211, 163, 231, 235,
                247, 64, 23, 17, 50, 55, 152, 184, 77, 36, 139, 3, 65, 22, 141, 44, 101, 222, 178,
                79, 95, 223, 240, 129, 95, 173, 117, 127, 160, 31, 49, 20, 126, 23, 162, 37, 158,
                183, 193, 237, 121, 198, 37, 55, 234, 50, 71, 168, 107, 201, 247, 136, 12, 247,
                241, 76, 216, 108, 184, 182, 0, 160, 120, 71, 114, 229, 254, 22, 67, 186, 22, 250,
                33, 242, 238, 54, 225, 191, 9, 105, 164, 80, 22, 16, 249, 252, 0, 59, 15, 126, 138,
                114, 149, 178, 160, 204, 120, 213, 10, 96, 224, 206, 193, 11, 4, 188, 13, 69, 116,
                233, 239, 225, 190, 180, 56, 7, 76, 182, 207, 212, 60, 231, 84, 98, 16, 89, 134,
                160, 98, 181, 54, 170, 216, 252, 128, 225, 24, 110, 216, 41, 149, 213, 94, 1, 134,
                15, 132, 164, 51, 164, 163, 211, 16, 61, 55, 154, 170, 172, 216, 134, 160, 77, 205,
                217, 140, 100, 34, 236, 74, 136, 136, 86, 244, 68, 198, 239, 175, 152, 136, 53,
                195, 79, 224, 86, 156, 50, 89, 80, 189, 12, 10, 118, 86, 160, 49, 228, 115, 39,
                185, 209, 184, 160, 2, 27, 119, 61, 42, 235, 223, 97, 233, 104, 109, 151, 80, 90,
                102, 248, 169, 106, 90, 91, 45, 103, 91, 72, 160, 166, 177, 12, 132, 220, 106, 211,
                212, 173, 95, 147, 59, 147, 65, 65, 235, 85, 103, 172, 84, 241, 114, 176, 4, 66,
                243, 235, 15, 183, 147, 171, 99, 160, 170, 15, 219, 99, 92, 183, 204, 30, 239, 80,
                101, 143, 23, 47, 16, 69, 70, 163, 0, 203, 66, 168, 119, 29, 204, 218, 34, 241,
                209, 243, 95, 182, 160, 91, 192, 169, 156, 109, 6, 99, 64, 17, 112, 189, 106, 13,
                87, 1, 44, 9, 66, 37, 50, 188, 172, 144, 19, 2, 7, 153, 76, 77, 124, 139, 113, 160,
                135, 210, 188, 61, 128, 189, 99, 26, 117, 139, 181, 154, 152, 219, 17, 197, 220,
                241, 102, 79, 97, 231, 86, 66, 57, 50, 13, 112, 202, 54, 203, 179, 160, 153, 34,
                230, 97, 145, 1, 187, 237, 5, 217, 86, 67, 126, 10, 195, 252, 209, 132, 214, 62,
                38, 196, 128, 189, 145, 63, 37, 125, 39, 255, 187, 44, 160, 62, 157, 161, 39, 77,
                213, 103, 231, 209, 182, 4, 204, 71, 75, 218, 198, 162, 112, 248, 112, 169, 248,
                92, 125, 253, 89, 27, 95, 94, 207, 241, 44, 128,
            ],
            vec![
                249, 5, 77, 32, 185, 5, 73, 2, 249, 5, 69, 1, 132, 1, 19, 87, 26, 185, 1, 0, 0, 2,
                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 12, 0, 0, 0, 0, 0, 0, 0,
                0, 2, 0, 0, 0, 0, 16, 0, 0, 2, 4, 0, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8,
                0, 0, 0, 16, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0,
                0, 0, 128, 0, 2, 0, 16, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 0, 0,
                0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 249, 4, 57, 248, 156, 148, 183, 84, 80, 20,
                163, 151, 59, 13, 39, 166, 94, 231, 109, 26, 94, 226, 157, 55, 177, 201, 248, 132,
                160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170,
                149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 169, 115, 44, 147, 67, 87, 243, 20, 27, 120, 46,
                179, 195, 197, 41, 151, 182, 112, 11, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
                190, 68, 62, 88, 12, 176, 27, 103, 17, 74, 83, 254, 144, 223, 13, 81, 194, 101,
                129, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 100, 101, 128, 249, 1, 222, 148, 168, 164, 84, 123, 226, 236,
                230, 221, 226, 221, 145, 180, 165, 173, 254, 74, 4, 59, 33, 199, 248, 132, 160,
                184, 171, 253, 92, 51, 102, 124, 116, 64, 164, 252, 17, 83, 174, 57, 162, 72, 51,
                219, 228, 79, 126, 177, 156, 190, 92, 213, 242, 88, 62, 73, 64, 160, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 11, 205, 136, 228, 125, 227, 107, 17, 177, 142, 32, 20, 72,
                186, 89, 165, 77, 55, 245, 254, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 185, 1, 64,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 238, 101, 73, 85, 115, 205, 161, 139, 209,
                203, 244, 60, 3, 233, 133, 70, 210, 209, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0,
                0, 0, 0, 0, 72, 183, 84, 80, 20, 163, 151, 59, 13, 39, 166, 94, 231, 109, 26, 94,
                226, 157, 55, 177, 201, 0, 2, 80, 111, 108, 121, 104, 101, 100, 114, 97, 32, 50,
                48, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 111, 108,
                121, 104, 101, 100, 114, 97, 32, 50, 48, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 101, 22, 169, 115, 44, 147, 67, 87, 243, 20, 27,
                120, 46, 179, 195, 197, 41, 151, 182, 112, 11, 0, 4, 105, 112, 102, 115, 58, 47,
                47, 81, 109, 83, 85, 112, 120, 54, 105, 53, 71, 80, 121, 54, 115, 49, 97, 72, 97,
                89, 109, 122, 80, 109, 72, 115, 70, 111, 50, 111, 81, 87, 57, 53, 115, 70, 68, 86,
                51, 121, 78, 54, 78, 121, 85, 81, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 248, 187, 148, 11, 205, 136, 228, 125, 227, 107, 17, 177,
                142, 32, 20, 72, 186, 89, 165, 77, 55, 245, 254, 248, 66, 160, 61, 51, 103, 248,
                100, 241, 44, 147, 165, 81, 82, 30, 139, 100, 36, 39, 228, 12, 245, 200, 187, 189,
                37, 44, 71, 218, 135, 81, 39, 174, 158, 191, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 184, 96, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 238, 101, 73, 85, 115, 205, 161, 139,
                209, 203, 244, 60, 3, 233, 133, 70, 210, 209, 19, 39, 3, 30, 88, 134, 129, 154,
                232, 156, 216, 138, 2, 13, 164, 21, 117, 77, 233, 185, 41, 212, 32, 90, 122, 7,
                250, 55, 117, 145, 25, 52, 30, 248, 251, 148, 203, 190, 68, 62, 88, 12, 176, 27,
                103, 17, 74, 83, 254, 144, 223, 13, 81, 194, 101, 129, 248, 66, 160, 225, 29, 44,
                162, 104, 56, 241, 90, 203, 65, 69, 0, 41, 167, 133, 187, 61, 111, 144, 155, 127,
                98, 46, 191, 156, 69, 82, 77, 237, 118, 244, 17, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 184, 160, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 84, 80, 20, 163, 151, 59, 13, 39, 166, 94, 231,
                109, 26, 94, 226, 157, 55, 177, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 22, 169, 115, 44, 147, 67, 87, 243, 20, 27, 120, 46, 179, 195,
                197, 41, 151, 182, 112, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 169, 115, 44,
                147, 67, 87, 243, 20, 27, 120, 46, 179, 195, 197, 41, 151, 182, 112, 11,
            ],
        ];

        let mpt_account = &ctx.accounts.mpt_proof;
        msg!(
            "len: {} eq: {}  ",
            &mpt_account.data.len(),
            &mpt_account.data.eq(&proof)
        );

        Ok(())
    }

    pub fn validate_mpt(ctx: Context<ValidateMpt>, key: Vec<u8>) -> Result<()> {
        let mpt_account = &ctx.accounts.mpt_proof;
        let root_hash = H256::from_slice(mpt_account.hash_root.as_slice());

        let mut rlp_signed_tx =
            EthTrie::verify_proof(root_hash, key.as_slice(), mpt_account.data.clone())
                .unwrap()
                .unwrap();
        rlp_signed_tx.remove(0);

        let rlp = Rlp::new(&rlp_signed_tx);
        msg!("rlp: {:?}", rlp.at(0).unwrap().as_val::<u8>()); //  交易是否成功的状态  u8
        msg!("rlp: {:?}", rlp.at(1).unwrap().as_val::<u64>()); //  effectiveGasPrice: u64

        Ok(())
    }
}

#[derive(Accounts)]
pub struct ValidateMpt<'info> {
    #[account(
        seeds = [PROOF_SEED, mpt_proof.hash_root.as_ref()],
        bump = mpt_proof.bump
    )]
    pub mpt_proof: Account<'info, MptProof>,
}

#[derive(Accounts)]
#[instruction(params: InitProofParams)]
pub struct InitProof<'info> {
    #[account(mut)]
    pub payer: Signer<'info>,
    #[account(
        init,
        payer = payer,
        space = 8 + 8+ 32 + params.proof_size as usize,
        seeds = [PROOF_SEED, params.hash_root.as_ref()],
        bump
    )]
    pub mpt_proof: Account<'info, MptProof>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct AppendProof<'info> {
    #[account(
        mut,
        seeds = [PROOF_SEED, mpt_proof.hash_root.as_ref()],
        bump = mpt_proof.bump
    )]
    pub mpt_proof: Account<'info, MptProof>,
}

#[account]
#[derive(Debug)]
pub struct MptProof {
    data: Vec<Vec<u8>>,
    hash_root: [u8; 32],
    bump: u8,
}

#[derive(Clone, AnchorSerialize, AnchorDeserialize)]
pub struct InitProofParams {
    pub hash_root: [u8; 32],
    pub proof_size: u32,
    // pub data: Vec<Vec<u8>>,
}

// #[derive(Debug)]
// pub struct LogInfo {
//     address: [u8; 20],
//     topics: Vec<[u8; 32]>,
//     data: Vec<u8>,
// }

// impl Decodable for LogInfo {
//     fn decode(rlp: &Rlp) -> Result<Self, DecoderError> {
//         let address = rlp.at(0).unwrap().data().unwrap().to_owned();
//         let address: [u8; 20] = match address.try_into() {
//             Ok(arr) => arr,
//             Err(e) => {
//                 // return Err("Failed to convert: {:?}", e);
//                 return Err(DecoderError::RlpExpectedToBeData);
//             }
//         };

//         let mut topic_list = Vec::new();
//         let topics = rlp.at(1).unwrap();
//         for topic in topics.iter() {
//             let value = topic.data().unwrap();
//             let t: [u8; 32] = match value.try_into() {
//                 Ok(arr) => arr,
//                 Err(e) => {
//                     // return Err("Failed to convert: {:?}", e);
//                     return Err(DecoderError::RlpExpectedToBeData);
//                 }
//             };
//             topic_list.push(t);
//         }
//         let data = rlp.at(2).unwrap().data().unwrap().to_owned();

//         Ok(LogInfo {
//             address,
//             topics: topic_list,
//             data,
//         })
//     }
// }
